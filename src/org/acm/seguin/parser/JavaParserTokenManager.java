/*
 * Generated By:JJTree&JavaCC: Do not edit this line. JavaParserTokenManager.java
 */
package org.acm.seguin.parser;

import org.acm.seguin.parser.io.CharStream;

/**
 *  The token generator for the parser
 *
 *@author    Chris Seguin
 */
public class JavaParserTokenManager implements JavaParserConstants {
	/**
	 *  Description of the Field
	 */
	public final static String[] jjstrLiteralImages = {
			"", null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, "\141\142\163\164\162\141\143\164",
			"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145",
			"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164",
			"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145",
			"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145",
			"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162",
			"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163",
			"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164",
			"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167",
			"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145",
			"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156",
			"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160",
			"\163\165\160\145\162", "\163\167\151\164\143\150",
			"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163",
			"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144",
			"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null,
			null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56",
			"\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75",
			"\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46",
			"\174", "\136", "\45", "\74\74", "\76\76", "\76\76\76", "\53\75", "\55\75", "\52\75",
			"\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75",
			"\76\76\76\75",};
	/**
	 *  Description of the Field
	 */
	public final static String[] lexStateNames = {
			"DEFAULT",
			"IN_SINGLE_LINE_COMMENT",
			"IN_FORMAL_COMMENT",
			"IN_MULTI_LINE_COMMENT",
			"IN_CATEGORY_COMMENT",
			};
	/**
	 *  Description of the Field
	 */
	public final static int[] jjnewLexState = {
			-1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			};
	/**
	 *  Description of the Field
	 */
	protected static char curChar;
	final static long[] jjbitVec0 = {
			0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
			};
	final static long[] jjbitVec1 = {
			0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
			};
	final static long[] jjbitVec3 = {
			0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
			};
	final static long[] jjbitVec4 = {
			0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
			};
	final static long[] jjbitVec5 = {
			0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
			};
	final static long[] jjbitVec6 = {
			0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
			};
	final static long[] jjbitVec7 = {
			0x3fffffffffffL, 0x0L, 0x0L, 0x0L
			};
	final static int[] jjnextStates = {
			46, 47, 52, 53, 56, 57, 12, 29, 30, 37, 38, 14, 16, 27, 61, 63,
			6, 8, 9, 12, 29, 30, 40, 37, 38, 48, 49, 12, 56, 57, 12, 10,
			11, 17, 18, 20, 31, 39, 41, 50, 51, 54, 55, 58, 59,
			};
	final static long[] jjtoToken = {
			0xffffffffffff0001L, 0xfffffffffffce8fL,
			};
	final static long[] jjtoSkip = {
			0x787eL, 0x0L,
			};
	final static long[] jjtoSpecial = {
			0x7870L, 0x0L,
			};
	final static long[] jjtoMore = {
			0x8780L, 0x0L,
			};
	static StringBuffer image;
	static int jjimageLen;
	static int lengthOfMatch;

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;
	private static CharStream input_stream;
	private final static int[] jjrounds = new int[64];
	private final static int[] jjstateSet = new int[128];


	/**
	 *  Constructor for the JavaParserTokenManager object
	 *
	 *@param  stream  Description of Parameter
	 */
	public JavaParserTokenManager(CharStream stream) {
		if (input_stream != null) {
			throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
		}
		input_stream = stream;
	}


	/**
	 *  Constructor for the JavaParserTokenManager object
	 *
	 *@param  stream    Description of Parameter
	 *@param  lexState  Description of Parameter
	 */
	public JavaParserTokenManager(CharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}


	/**
	 *  Gets the NextToken attribute of the JavaParserTokenManager class
	 *
	 *@return    The NextToken value
	 */
	public final static Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop :
		for (; ; ) {
			try {
				curChar = input_stream.BeginToken();
			}
			catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;

			for (; ; ) {
				switch (curLexState) {
					case 0:
						try {
							input_stream.backup(0);
							while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L) {
								curChar = input_stream.BeginToken();
							}
						}
						catch (java.io.IOException e1) {
							continue EOFLoop;
						}
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_0();
						break;
					case 1:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_1();
						if (jjmatchedPos == 0 && jjmatchedKind > 15) {
							jjmatchedKind = 15;
						}
						break;
					case 2:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_2();
						if (jjmatchedPos == 0 && jjmatchedKind > 15) {
							jjmatchedKind = 15;
						}
						break;
					case 3:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_3();
						if (jjmatchedPos == 0 && jjmatchedKind > 15) {
							jjmatchedKind = 15;
						}
						break;
					case 4:
						jjmatchedKind = 0x7fffffff;
						jjmatchedPos = 0;
						curPos = jjMoveStringLiteralDfa0_4();
						if (jjmatchedPos == 0 && jjmatchedKind > 15) {
							jjmatchedKind = 15;
						}
						break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos) {
						input_stream.backup(curPos - jjmatchedPos - 1);
					}
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						if (jjnewLexState[jjmatchedKind] != -1) {
							curLexState = jjnewLexState[jjmatchedKind];
						}
						return matchedToken;
					}
					else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
							matchedToken = jjFillToken();
							if (specialToken == null) {
								specialToken = matchedToken;
							}
							else {
								matchedToken.specialToken = specialToken;
								specialToken = (specialToken.next = matchedToken);
							}
							SkipLexicalActions(matchedToken);
						}
						else {
							SkipLexicalActions(null);
						}
						if (jjnewLexState[jjmatchedKind] != -1) {
							curLexState = jjnewLexState[jjmatchedKind];
						}
						continue EOFLoop;
					}
					MoreLexicalActions();
					if (jjnewLexState[jjmatchedKind] != -1) {
						curLexState = jjnewLexState[jjmatchedKind];
					}
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					}
					catch (java.io.IOException e1) {
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				}
				catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					}
					else {
						error_column++;
					}
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				else {
					Token result = new Token();
					result.kind = JavaParserConstants.EOF;
					return result;
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
			}
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  stream  Description of Parameter
	 */
	public static void ReInit(CharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}


	/**
	 *  Description of the Method
	 *
	 *@param  stream    Description of Parameter
	 *@param  lexState  Description of Parameter
	 */
	public static void ReInit(CharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  lexState  Description of Parameter
	 */
	public static void SwitchTo(int lexState) {
		if (lexState >= 5 || lexState < 0) {
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
		}
		else {
			curLexState = lexState;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  matchedToken  Description of Parameter
	 */
	final static void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
			default:
				break;
		}
	}


	/**
	 *  Description of the Method
	 */
	final static void MoreLexicalActions() {
		jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
		switch (jjmatchedKind) {
			case 8:
				if (image == null) {
					image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
				}
				else {
					image.append(new String(input_stream.GetSuffix(jjimageLen)));
				}
				jjimageLen = 0;
				input_stream.backup(1);
				break;
			default:
				break;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  pos   Description of Parameter
	 *@param  kind  Description of Parameter
	 *@return       Description of the Returned Value
	 */
	private final static int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa0_4() {
		switch (curChar) {
			case 62:
				return jjMoveStringLiteralDfa1_4(0x4000L);
			default:
				return 1;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa1_4(long active0) {
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
			case 42:
				return jjMoveStringLiteralDfa2_4(active0, 0x4000L);
			default:
				return 2;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa2_4(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return 2;
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return 2;
		}
		switch (curChar) {
			case 47:
				if ((active0 & 0x4000L) != 0L) {
					return jjStopAtPos(2, 14);
				}
				break;
			default:
				return 3;
		}
		return 3;
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa0_3() {
		switch (curChar) {
			case 42:
				return jjMoveStringLiteralDfa1_3(0x2000L);
			default:
				return 1;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa1_3(long active0) {
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
			case 47:
				if ((active0 & 0x2000L) != 0L) {
					return jjStopAtPos(1, 13);
				}
				break;
			default:
				return 2;
		}
		return 2;
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa0_2() {
		switch (curChar) {
			case 42:
				return jjMoveStringLiteralDfa1_2(0x1000L);
			default:
				return 1;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa1_2(long active0) {
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
			case 47:
				if ((active0 & 0x1000L) != 0L) {
					return jjStopAtPos(1, 12);
				}
				break;
			default:
				return 2;
		}
		return 2;
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa0_1() {
		return jjMoveNfa_1(0, 0);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  state  Description of Parameter
	 */
	private final static void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  start  Description of Parameter
	 *@param  end    Description of Parameter
	 */
	private final static void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  state1  Description of Parameter
	 *@param  state2  Description of Parameter
	 */
	private final static void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  start  Description of Parameter
	 *@param  end    Description of Parameter
	 */
	private final static void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  start  Description of Parameter
	 */
	private final static void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  startState  Description of Parameter
	 *@param  curPos      Description of Parameter
	 *@return             Description of the Returned Value
	 */
	private final static int jjMoveNfa_1(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 3;
		int i = 1;
		jjstateSet[0] = startState;
		int j;
		int kind = 0x7fffffff;
		for (; ; ) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop :
				do {
					switch (jjstateSet[--i]) {
						case 0:
							if ((0x2400L & l) != 0L) {
								if (kind > 11) {
									kind = 11;
								}
							}
							if (curChar == 13) {
								jjstateSet[jjnewStateCnt++] = 1;
							}
							break;
						case 1:
							if (curChar == 10 && kind > 11) {
								kind = 11;
							}
							break;
						case 2:
							if (curChar == 13) {
								jjstateSet[jjnewStateCnt++] = 1;
							}
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop :
				do {
					switch (jjstateSet[--i]) {
						default:
							break;
					}
				} while (i != startsAt);
			}
			else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop :
				do {
					switch (jjstateSet[--i]) {
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			}
			catch (java.io.IOException e) {
				return curPos;
			}
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  pos      Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
			case 0:
				if ((active0 & 0xffffffffffff0000L) != 0L || (active1 & 0x7L) != 0L) {
					jjmatchedKind = 75;
					return 44;
				}
				if ((active0 & 0x680L) != 0L || (active1 & 0x10020000000000L) != 0L) {
					return 2;
				}
				if ((active1 & 0x400000L) != 0L) {
					return 8;
				}
				return -1;
			case 1:
				if ((active0 & 0x600L) != 0L) {
					return 0;
				}
				if ((active0 & 0x2018000000L) != 0L) {
					return 44;
				}
				if ((active0 & 0xffffffdfe7ff0000L) != 0L || (active1 & 0x7L) != 0L) {
					if (jjmatchedPos != 1) {
						jjmatchedKind = 75;
						jjmatchedPos = 1;
					}
					return 44;
				}
				return -1;
			case 2:
				if ((active0 & 0x8000260800000000L) != 0L) {
					return 44;
				}
				if ((active0 & 0x7fffd9d7f7ff0000L) != 0L || (active1 & 0x7L) != 0L) {
					if (jjmatchedPos != 2) {
						jjmatchedKind = 75;
						jjmatchedPos = 2;
					}
					return 44;
				}
				return -1;
			case 3:
				if ((active0 & 0x4400481020580000L) != 0L || (active1 & 0x1L) != 0L) {
					return 44;
				}
				if ((active0 & 0x3bff95c7d7a70000L) != 0L || (active1 & 0x6L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 3;
					return 44;
				}
				return -1;
			case 4:
				if ((active0 & 0x236f95c056030000L) != 0L || (active1 & 0x2L) != 0L) {
					if (jjmatchedPos != 4) {
						jjmatchedKind = 75;
						jjmatchedPos = 4;
					}
					return 44;
				}
				if ((active0 & 0x1890000781a40000L) != 0L || (active1 & 0x4L) != 0L) {
					return 44;
				}
				return -1;
			case 5:
				if ((active0 & 0x112c108010000000L) != 0L) {
					return 44;
				}
				if ((active0 & 0x2243854246030000L) != 0L || (active1 & 0x2L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 5;
					return 44;
				}
				return -1;
			case 6:
				if ((active0 & 0x1800244020000L) != 0L) {
					return 44;
				}
				if ((active0 & 0x2242054002010000L) != 0L || (active1 & 0x2L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 6;
					return 44;
				}
				return -1;
			case 7:
				if ((active0 & 0x40000002010000L) != 0L || (active1 & 0x2L) != 0L) {
					return 44;
				}
				if ((active0 & 0x2202054000000000L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 7;
					return 44;
				}
				return -1;
			case 8:
				if ((active0 & 0x200014000000000L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 8;
					return 44;
				}
				if ((active0 & 0x2002040000000000L) != 0L) {
					return 44;
				}
				return -1;
			case 9:
				if ((active0 & 0x14000000000L) != 0L) {
					return 44;
				}
				if ((active0 & 0x200000000000000L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 9;
					return 44;
				}
				return -1;
			case 10:
				if ((active0 & 0x200000000000000L) != 0L) {
					jjmatchedKind = 75;
					jjmatchedPos = 10;
					return 44;
				}
				return -1;
			default:
				return -1;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  pos      Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  pos    Description of Parameter
	 *@param  kind   Description of Parameter
	 *@param  state  Description of Parameter
	 *@return        Description of the Returned Value
	 */
	private final static int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
			case 10:
				return jjStopAtPos(0, 4);
			case 13:
				jjmatchedKind = 5;
				return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
			case 33:
				jjmatchedKind = 90;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
			case 37:
				jjmatchedKind = 109;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L);
			case 38:
				jjmatchedKind = 106;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x20000800000000L);
			case 40:
				return jjStopAtPos(0, 78);
			case 41:
				return jjStopAtPos(0, 79);
			case 42:
				jjmatchedKind = 104;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L);
			case 43:
				jjmatchedKind = 102;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x2001000000000L);
			case 44:
				return jjStopAtPos(0, 85);
			case 45:
				jjmatchedKind = 103;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x4002000000000L);
			case 46:
				return jjStartNfaWithStates_0(0, 86, 8);
			case 47:
				jjmatchedKind = 105;
				return jjMoveStringLiteralDfa1_0(0x680L, 0x10000000000000L);
			case 58:
				return jjStopAtPos(0, 93);
			case 59:
				return jjStopAtPos(0, 84);
			case 60:
				jjmatchedKind = 89;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x200400080000000L);
			case 61:
				jjmatchedKind = 87;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
			case 62:
				jjmatchedKind = 88;
				return jjMoveStringLiteralDfa1_0(0x0L, 0xc01800100000000L);
			case 63:
				return jjStopAtPos(0, 92);
			case 91:
				return jjStopAtPos(0, 82);
			case 93:
				return jjStopAtPos(0, 83);
			case 94:
				jjmatchedKind = 108;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L);
			case 97:
				return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
			case 98:
				return jjMoveStringLiteralDfa1_0(0xe0000L, 0x0L);
			case 99:
				return jjMoveStringLiteralDfa1_0(0x3f00000L, 0x0L);
			case 100:
				return jjMoveStringLiteralDfa1_0(0x1c000000L, 0x0L);
			case 101:
				return jjMoveStringLiteralDfa1_0(0x60000000L, 0x0L);
			case 102:
				return jjMoveStringLiteralDfa1_0(0xf80000000L, 0x0L);
			case 103:
				return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
			case 105:
				return jjMoveStringLiteralDfa1_0(0x7e000000000L, 0x0L);
			case 108:
				return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
			case 110:
				return jjMoveStringLiteralDfa1_0(0x700000000000L, 0x0L);
			case 112:
				return jjMoveStringLiteralDfa1_0(0x7800000000000L, 0x0L);
			case 114:
				return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
			case 115:
				return jjMoveStringLiteralDfa1_0(0x3f0000000000000L, 0x0L);
			case 116:
				return jjMoveStringLiteralDfa1_0(0xfc00000000000000L, 0x0L);
			case 118:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
			case 119:
				return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
			case 123:
				return jjStopAtPos(0, 80);
			case 124:
				jjmatchedKind = 107;
				return jjMoveStringLiteralDfa1_0(0x0L, 0x40000400000000L);
			case 125:
				return jjStopAtPos(0, 81);
			case 126:
				return jjStopAtPos(0, 91);
			default:
				return jjMoveNfa_0(3, 0);
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@param  active0  Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
			case 10:
				if ((active0 & 0x40L) != 0L) {
					return jjStopAtPos(1, 6);
				}
				break;
			case 38:
				if ((active1 & 0x800000000L) != 0L) {
					return jjStopAtPos(1, 99);
				}
				break;
			case 42:
				if ((active0 & 0x200L) != 0L) {
					jjmatchedKind = 9;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
			case 43:
				if ((active1 & 0x1000000000L) != 0L) {
					return jjStopAtPos(1, 100);
				}
				break;
			case 45:
				if ((active1 & 0x2000000000L) != 0L) {
					return jjStopAtPos(1, 101);
				}
				break;
			case 47:
				if ((active0 & 0x80L) != 0L) {
					return jjStopAtPos(1, 7);
				}
				break;
			case 60:
				if ((active1 & 0x400000000000L) != 0L) {
					jjmatchedKind = 110;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L);
			case 61:
				if ((active1 & 0x40000000L) != 0L) {
					return jjStopAtPos(1, 94);
				}
				else if ((active1 & 0x80000000L) != 0L) {
					return jjStopAtPos(1, 95);
				}
				else if ((active1 & 0x100000000L) != 0L) {
					return jjStopAtPos(1, 96);
				}
				else if ((active1 & 0x200000000L) != 0L) {
					return jjStopAtPos(1, 97);
				}
				else if ((active1 & 0x2000000000000L) != 0L) {
					return jjStopAtPos(1, 113);
				}
				else if ((active1 & 0x4000000000000L) != 0L) {
					return jjStopAtPos(1, 114);
				}
				else if ((active1 & 0x8000000000000L) != 0L) {
					return jjStopAtPos(1, 115);
				}
				else if ((active1 & 0x10000000000000L) != 0L) {
					return jjStopAtPos(1, 116);
				}
				else if ((active1 & 0x20000000000000L) != 0L) {
					return jjStopAtPos(1, 117);
				}
				else if ((active1 & 0x40000000000000L) != 0L) {
					return jjStopAtPos(1, 118);
				}
				else if ((active1 & 0x80000000000000L) != 0L) {
					return jjStopAtPos(1, 119);
				}
				else if ((active1 & 0x100000000000000L) != 0L) {
					return jjStopAtPos(1, 120);
				}
				break;
			case 62:
				if ((active1 & 0x800000000000L) != 0L) {
					jjmatchedKind = 111;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc01000000000000L);
			case 97:
				return jjMoveStringLiteralDfa2_0(active0, 0x900080300000L, active1, 0L);
			case 98:
				return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
			case 101:
				return jjMoveStringLiteralDfa2_0(active0, 0x8200004000000L, active1, 0L);
			case 102:
				if ((active0 & 0x2000000000L) != 0L) {
					return jjStartNfaWithStates_0(1, 37, 44);
				}
				break;
			case 104:
				return jjMoveStringLiteralDfa2_0(active0, 0x1c10000000400000L, active1, 0x4L);
			case 105:
				return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L);
			case 108:
				return jjMoveStringLiteralDfa2_0(active0, 0x420800000L, active1, 0L);
			case 109:
				return jjMoveStringLiteralDfa2_0(active0, 0xc000000000L, active1, 0L);
			case 110:
				return jjMoveStringLiteralDfa2_0(active0, 0x70000000000L, active1, 0L);
			case 111:
				if ((active0 & 0x8000000L) != 0L) {
					jjmatchedKind = 27;
					jjmatchedPos = 1;
				}
				return jjMoveStringLiteralDfa2_0(active0, 0x81813020000L, active1, 0x3L);
			case 114:
				return jjMoveStringLiteralDfa2_0(active0, 0xe003000000040000L, active1, 0L);
			case 116:
				return jjMoveStringLiteralDfa2_0(active0, 0x60000000000000L, active1, 0L);
			case 117:
				return jjMoveStringLiteralDfa2_0(active0, 0x84400000000000L, active1, 0L);
			case 119:
				return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
			case 120:
				return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
			case 121:
				return jjMoveStringLiteralDfa2_0(active0, 0x200000000080000L, active1, 0L);
			case 124:
				if ((active1 & 0x400000000L) != 0L) {
					return jjStopAtPos(1, 98);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(0, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(0, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
			case 60:
				if ((active0 & 0x400L) != 0L) {
					return jjStopAtPos(2, 10);
				}
				break;
			case 61:
				if ((active1 & 0x200000000000000L) != 0L) {
					return jjStopAtPos(2, 121);
				}
				else if ((active1 & 0x400000000000000L) != 0L) {
					return jjStopAtPos(2, 122);
				}
				break;
			case 62:
				if ((active1 & 0x1000000000000L) != 0L) {
					jjmatchedKind = 112;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L);
			case 97:
				return jjMoveStringLiteralDfa3_0(active0, 0x2020000000c00000L, active1, 0L);
			case 98:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
			case 99:
				return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
			case 101:
				return jjMoveStringLiteralDfa3_0(active0, 0x40000L, active1, 0L);
			case 102:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
			case 105:
				return jjMoveStringLiteralDfa3_0(active0, 0x501000000000000L, active1, 0x5L);
			case 108:
				return jjMoveStringLiteralDfa3_0(active0, 0x400080000000L, active1, 0x2L);
			case 110:
				return jjMoveStringLiteralDfa3_0(active0, 0x200080303000000L, active1, 0L);
			case 111:
				return jjMoveStringLiteralDfa3_0(active0, 0x12000400020000L, active1, 0L);
			case 112:
				return jjMoveStringLiteralDfa3_0(active0, 0x8000c000000000L, active1, 0L);
			case 114:
				if ((active0 & 0x800000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 35, 44);
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x1840000000000000L, active1, 0L);
			case 115:
				return jjMoveStringLiteralDfa3_0(active0, 0x10020110000L, active1, 0L);
			case 116:
				if ((active0 & 0x20000000000L) != 0L) {
					jjmatchedKind = 41;
					jjmatchedPos = 2;
				}
				return jjMoveStringLiteralDfa3_0(active0, 0x8141040280000L, active1, 0L);
			case 117:
				return jjMoveStringLiteralDfa3_0(active0, 0x4000000010000000L, active1, 0L);
			case 119:
				if ((active0 & 0x200000000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 45, 44);
				}
				break;
			case 121:
				if ((active0 & 0x8000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(2, 63, 44);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(1, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(1, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
			case 61:
				if ((active1 & 0x800000000000000L) != 0L) {
					return jjStopAtPos(3, 123);
				}
				break;
			case 97:
				return jjMoveStringLiteralDfa4_0(active0, 0x704040000L, active1, 0x2L);
			case 98:
				return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
			case 99:
				return jjMoveStringLiteralDfa4_0(active0, 0x200000000200000L, active1, 0L);
			case 100:
				if ((active1 & 0x1L) != 0L) {
					return jjStartNfaWithStates_0(3, 64, 44);
				}
				break;
			case 101:
				if ((active0 & 0x80000L) != 0L) {
					return jjStartNfaWithStates_0(3, 19, 44);
				}
				else if ((active0 & 0x100000L) != 0L) {
					return jjStartNfaWithStates_0(3, 20, 44);
				}
				else if ((active0 & 0x20000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 29, 44);
				}
				else if ((active0 & 0x4000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 62, 44);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x80040040000000L, active1, 0L);
			case 103:
				if ((active0 & 0x80000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 43, 44);
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa4_0(active0, 0x40100000000000L, active1, 0L);
			case 107:
				return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
			case 108:
				if ((active0 & 0x400000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 46, 44);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x4004000020000L, active1, 0x4L);
			case 110:
				return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
			case 111:
				if ((active0 & 0x1000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 36, 44);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x1800008000000000L, active1, 0L);
			case 114:
				if ((active0 & 0x400000L) != 0L) {
					return jjStartNfaWithStates_0(3, 22, 44);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
			case 115:
				if ((active0 & 0x400000000000000L) != 0L) {
					return jjStartNfaWithStates_0(3, 58, 44);
				}
				return jjMoveStringLiteralDfa4_0(active0, 0x81800000L, active1, 0L);
			case 116:
				return jjMoveStringLiteralDfa4_0(active0, 0x122010002010000L, active1, 0L);
			case 117:
				return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
			case 118:
				return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(2, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(2, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
			case 97:
				return jjMoveStringLiteralDfa5_0(active0, 0x1810000000000L, active1, 0L);
			case 99:
				return jjMoveStringLiteralDfa5_0(active0, 0x140000000000000L, active1, 0L);
			case 101:
				if ((active0 & 0x80000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 31, 44);
				}
				else if ((active1 & 0x4L) != 0L) {
					return jjStartNfaWithStates_0(4, 66, 44);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x2004000020000L, active1, 0L);
			case 104:
				if ((active0 & 0x200000L) != 0L) {
					return jjStartNfaWithStates_0(4, 21, 44);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L);
			case 105:
				return jjMoveStringLiteralDfa5_0(active0, 0x24000002000000L, active1, 0L);
			case 107:
				if ((active0 & 0x40000L) != 0L) {
					return jjStartNfaWithStates_0(4, 18, 44);
				}
				break;
			case 108:
				if ((active0 & 0x100000000L) != 0L) {
					jjmatchedKind = 32;
					jjmatchedPos = 4;
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x210000000L, active1, 0L);
			case 110:
				return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
			case 114:
				if ((active0 & 0x80000000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 55, 44);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x8048000010000L, active1, 0L);
			case 115:
				if ((active0 & 0x800000L) != 0L) {
					return jjStartNfaWithStates_0(4, 23, 44);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
			case 116:
				if ((active0 & 0x1000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 24, 44);
				}
				else if ((active0 & 0x400000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 34, 44);
				}
				else if ((active0 & 0x10000000000000L) != 0L) {
					return jjStartNfaWithStates_0(4, 52, 44);
				}
				return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
			case 117:
				return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
			case 118:
				return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
			case 119:
				if ((active0 & 0x800000000000000L) != 0L) {
					jjmatchedKind = 59;
					jjmatchedPos = 4;
				}
				return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(3, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(3, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
			case 97:
				return jjMoveStringLiteralDfa6_0(active0, 0x30000L, active1, 0L);
			case 99:
				if ((active0 & 0x4000000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 50, 44);
				}
				else if ((active0 & 0x20000000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 53, 44);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
			case 100:
				return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0L);
			case 101:
				if ((active0 & 0x10000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 28, 44);
				}
				else if ((active0 & 0x100000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 44, 44);
				}
				break;
			case 102:
				return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
			case 103:
				return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
			case 104:
				if ((active0 & 0x100000000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 56, 44);
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x2L);
			case 108:
				return jjMoveStringLiteralDfa6_0(active0, 0x204000000L, active1, 0L);
			case 109:
				return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
			case 110:
				if ((active0 & 0x8000000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 51, 44);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x10002000000L, active1, 0L);
			case 114:
				return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
			case 115:
				if ((active0 & 0x1000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 60, 44);
				}
				break;
			case 116:
				if ((active0 & 0x8000000000L) != 0L) {
					return jjStartNfaWithStates_0(5, 39, 44);
				}
				return jjMoveStringLiteralDfa6_0(active0, 0x41000000000000L, active1, 0L);
			default:
				break;
		}
		return jjStartNfa_0(4, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(4, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch (curChar) {
			case 97:
				return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
			case 99:
				return jjMoveStringLiteralDfa7_0(active0, 0x10000010000L, active1, 0L);
			case 101:
				if ((active0 & 0x800000000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 47, 44);
				}
				else if ((active0 & 0x1000000000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 48, 44);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0x2000004000000000L, active1, 0L);
			case 102:
				return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
			case 108:
				return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
			case 110:
				if ((active0 & 0x20000L) != 0L) {
					return jjStartNfaWithStates_0(6, 17, 44);
				}
				break;
			case 111:
				return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
			case 115:
				if ((active0 & 0x40000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 30, 44);
				}
				break;
			case 116:
				if ((active0 & 0x4000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 26, 44);
				}
				return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
			case 117:
				return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
			case 121:
				if ((active0 & 0x200000000L) != 0L) {
					return jjStartNfaWithStates_0(6, 33, 44);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(5, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(5, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1);
			return 7;
		}
		switch (curChar) {
			case 99:
				return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L);
			case 101:
				if ((active0 & 0x2000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 25, 44);
				}
				else if ((active1 & 0x2L) != 0L) {
					return jjStartNfaWithStates_0(7, 65, 44);
				}
				return jjMoveStringLiteralDfa8_0(active0, 0x2010000000000L, active1, 0L);
			case 110:
				return jjMoveStringLiteralDfa8_0(active0, 0x2200004000000000L, active1, 0L);
			case 112:
				if ((active0 & 0x40000000000000L) != 0L) {
					return jjStartNfaWithStates_0(7, 54, 44);
				}
				break;
			case 116:
				if ((active0 & 0x10000L) != 0L) {
					return jjStartNfaWithStates_0(7, 16, 44);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(6, active0, active1);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@param  old1     Description of Parameter
	 *@param  active1  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L) {
			return jjStartNfa_0(6, old0, old1);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, 0L);
			return 8;
		}
		switch (curChar) {
			case 100:
				if ((active0 & 0x2000000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 49, 44);
				}
				break;
			case 101:
				if ((active0 & 0x40000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 42, 44);
				}
				break;
			case 105:
				return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
			case 111:
				return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L);
			case 116:
				if ((active0 & 0x2000000000000000L) != 0L) {
					return jjStartNfaWithStates_0(8, 61, 44);
				}
				return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L);
			default:
				break;
		}
		return jjStartNfa_0(7, active0, 0L);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(7, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch (curChar) {
			case 102:
				if ((active0 & 0x10000000000L) != 0L) {
					return jjStartNfaWithStates_0(9, 40, 44);
				}
				break;
			case 115:
				if ((active0 & 0x4000000000L) != 0L) {
					return jjStartNfaWithStates_0(9, 38, 44);
				}
				break;
			case 122:
				return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L);
			default:
				break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(8, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, 0L);
			return 10;
		}
		switch (curChar) {
			case 101:
				return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
			default:
				break;
		}
		return jjStartNfa_0(9, active0, 0L);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  old0     Description of Parameter
	 *@param  active0  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	private final static int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L) {
			return jjStartNfa_0(9, old0, 0L);
		}
		try {
			curChar = input_stream.readChar();
		}
		catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, 0L);
			return 11;
		}
		switch (curChar) {
			case 100:
				if ((active0 & 0x200000000000000L) != 0L) {
					return jjStartNfaWithStates_0(11, 57, 44);
				}
				break;
			default:
				break;
		}
		return jjStartNfa_0(10, active0, 0L);
	}


	/**
	 *  Description of the Method
	 *
	 *@param  startState  Description of Parameter
	 *@param  curPos      Description of Parameter
	 *@return             Description of the Returned Value
	 */
	private final static int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 64;
		int i = 1;
		jjstateSet[0] = startState;
		int j;
		int kind = 0x7fffffff;
		for (; ; ) {
			if (++jjround == 0x7fffffff) {
				ReInitRounds();
			}
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop :
				do {
					switch (jjstateSet[--i]) {
						case 3:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddStates(0, 6);
							}
							else if (curChar == 36) {
								if (kind > 75) {
									kind = 75;
								}
								jjCheckNAdd(44);
							}
							else if (curChar == 34) {
								jjCheckNAddStates(7, 10);
							}
							else if (curChar == 39) {
								jjAddStates(11, 13);
							}
							else if (curChar == 46) {
								jjCheckNAdd(8);
							}
							else if (curChar == 47) {
								jjstateSet[jjnewStateCnt++] = 2;
							}
							if ((0x3fe000000000000L & l) != 0L) {
								if (kind > 67) {
									kind = 67;
								}
								jjCheckNAddTwoStates(5, 6);
							}
							else if (curChar == 48) {
								if (kind > 67) {
									kind = 67;
								}
								jjCheckNAddStates(14, 16);
							}
							break;
						case 0:
							if (curChar == 42) {
								jjstateSet[jjnewStateCnt++] = 1;
							}
							break;
						case 1:
							if ((0xffff7fffffffffffL & l) != 0L && kind > 8) {
								kind = 8;
							}
							break;
						case 2:
							if (curChar == 42) {
								jjstateSet[jjnewStateCnt++] = 0;
							}
							break;
						case 4:
							if ((0x3fe000000000000L & l) == 0L) {
								break;
							}
							if (kind > 67) {
								kind = 67;
							}
							jjCheckNAddTwoStates(5, 6);
							break;
						case 5:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 67) {
								kind = 67;
							}
							jjCheckNAddTwoStates(5, 6);
							break;
						case 7:
							if (curChar == 46) {
								jjCheckNAdd(8);
							}
							break;
						case 8:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 71) {
								kind = 71;
							}
							jjCheckNAddStates(17, 19);
							break;
						case 10:
							if ((0x280000000000L & l) != 0L) {
								jjCheckNAdd(11);
							}
							break;
						case 11:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 71) {
								kind = 71;
							}
							jjCheckNAddTwoStates(11, 12);
							break;
						case 13:
							if (curChar == 39) {
								jjAddStates(11, 13);
							}
							break;
						case 14:
							if ((0xffffff7fffffdbffL & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 15:
							if (curChar == 39 && kind > 73) {
								kind = 73;
							}
							break;
						case 17:
							if ((0x8400000000L & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 18:
							if ((0xff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(19, 15);
							}
							break;
						case 19:
							if ((0xff000000000000L & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 20:
							if ((0xf000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 21;
							}
							break;
						case 21:
							if ((0xff000000000000L & l) != 0L) {
								jjCheckNAdd(19);
							}
							break;
						case 23:
							if ((0x3ff000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 24;
							}
							break;
						case 24:
							if ((0x3ff000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 25;
							}
							break;
						case 25:
							if ((0x3ff000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 26;
							}
							break;
						case 26:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 28:
							if (curChar == 34) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 29:
							if ((0xfffffffbffffdbffL & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 31:
							if ((0x8400000000L & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 33:
							if ((0x3ff000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 34;
							}
							break;
						case 34:
							if ((0x3ff000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 35;
							}
							break;
						case 35:
							if ((0x3ff000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 36;
							}
							break;
						case 36:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 38:
							if (curChar == 34 && kind > 74) {
								kind = 74;
							}
							break;
						case 39:
							if ((0xff000000000000L & l) != 0L) {
								jjCheckNAddStates(20, 24);
							}
							break;
						case 40:
							if ((0xff000000000000L & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 41:
							if ((0xf000000000000L & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 42;
							}
							break;
						case 42:
							if ((0xff000000000000L & l) != 0L) {
								jjCheckNAdd(40);
							}
							break;
						case 43:
							if (curChar != 36) {
								break;
							}
							if (kind > 75) {
								kind = 75;
							}
							jjCheckNAdd(44);
							break;
						case 44:
							if ((0x3ff001000000000L & l) == 0L) {
								break;
							}
							if (kind > 75) {
								kind = 75;
							}
							jjCheckNAdd(44);
							break;
						case 45:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddStates(0, 6);
							}
							break;
						case 46:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(46, 47);
							}
							break;
						case 47:
							if (curChar != 46) {
								break;
							}
							if (kind > 71) {
								kind = 71;
							}
							jjCheckNAddStates(25, 27);
							break;
						case 48:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 71) {
								kind = 71;
							}
							jjCheckNAddStates(25, 27);
							break;
						case 50:
							if ((0x280000000000L & l) != 0L) {
								jjCheckNAdd(51);
							}
							break;
						case 51:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 71) {
								kind = 71;
							}
							jjCheckNAddTwoStates(51, 12);
							break;
						case 52:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(52, 53);
							}
							break;
						case 54:
							if ((0x280000000000L & l) != 0L) {
								jjCheckNAdd(55);
							}
							break;
						case 55:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 71) {
								kind = 71;
							}
							jjCheckNAddTwoStates(55, 12);
							break;
						case 56:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddStates(28, 30);
							}
							break;
						case 58:
							if ((0x280000000000L & l) != 0L) {
								jjCheckNAdd(59);
							}
							break;
						case 59:
							if ((0x3ff000000000000L & l) != 0L) {
								jjCheckNAddTwoStates(59, 12);
							}
							break;
						case 60:
							if (curChar != 48) {
								break;
							}
							if (kind > 67) {
								kind = 67;
							}
							jjCheckNAddStates(14, 16);
							break;
						case 62:
							if ((0x3ff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 67) {
								kind = 67;
							}
							jjCheckNAddTwoStates(62, 6);
							break;
						case 63:
							if ((0xff000000000000L & l) == 0L) {
								break;
							}
							if (kind > 67) {
								kind = 67;
							}
							jjCheckNAddTwoStates(63, 6);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop :
				do {
					switch (jjstateSet[--i]) {
						case 3:
						case 44:
							if ((0x7fffffe87fffffeL & l) == 0L) {
								break;
							}
							if (kind > 75) {
								kind = 75;
							}
							jjCheckNAdd(44);
							break;
						case 1:
							if (kind > 8) {
								kind = 8;
							}
							break;
						case 6:
							if ((0x100000001000L & l) != 0L && kind > 67) {
								kind = 67;
							}
							break;
						case 9:
							if ((0x2000000020L & l) != 0L) {
								jjAddStates(31, 32);
							}
							break;
						case 12:
							if ((0x5000000050L & l) != 0L && kind > 71) {
								kind = 71;
							}
							break;
						case 14:
							if ((0xffffffffefffffffL & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 16:
							if (curChar == 92) {
								jjAddStates(33, 35);
							}
							break;
						case 17:
							if ((0x14404410000000L & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 22:
							if (curChar == 117) {
								jjstateSet[jjnewStateCnt++] = 23;
							}
							break;
						case 23:
							if ((0x7e0000007eL & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 24;
							}
							break;
						case 24:
							if ((0x7e0000007eL & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 25;
							}
							break;
						case 25:
							if ((0x7e0000007eL & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 26;
							}
							break;
						case 26:
							if ((0x7e0000007eL & l) != 0L) {
								jjCheckNAdd(15);
							}
							break;
						case 27:
							if (curChar == 92) {
								jjstateSet[jjnewStateCnt++] = 22;
							}
							break;
						case 29:
							if ((0xffffffffefffffffL & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 30:
							if (curChar == 92) {
								jjAddStates(36, 38);
							}
							break;
						case 31:
							if ((0x14404410000000L & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 32:
							if (curChar == 117) {
								jjstateSet[jjnewStateCnt++] = 33;
							}
							break;
						case 33:
							if ((0x7e0000007eL & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 34;
							}
							break;
						case 34:
							if ((0x7e0000007eL & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 35;
							}
							break;
						case 35:
							if ((0x7e0000007eL & l) != 0L) {
								jjstateSet[jjnewStateCnt++] = 36;
							}
							break;
						case 36:
							if ((0x7e0000007eL & l) != 0L) {
								jjCheckNAddStates(7, 10);
							}
							break;
						case 37:
							if (curChar == 92) {
								jjstateSet[jjnewStateCnt++] = 32;
							}
							break;
						case 49:
							if ((0x2000000020L & l) != 0L) {
								jjAddStates(39, 40);
							}
							break;
						case 53:
							if ((0x2000000020L & l) != 0L) {
								jjAddStates(41, 42);
							}
							break;
						case 57:
							if ((0x2000000020L & l) != 0L) {
								jjAddStates(43, 44);
							}
							break;
						case 61:
							if ((0x100000001000000L & l) != 0L) {
								jjCheckNAdd(62);
							}
							break;
						case 62:
							if ((0x7e0000007eL & l) == 0L) {
								break;
							}
							if (kind > 67) {
								kind = 67;
							}
							jjCheckNAddTwoStates(62, 6);
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop :
				do {
					switch (jjstateSet[--i]) {
						case 3:
						case 44:
							if ((jjbitVec3[i2] & l2) == 0L) {
								break;
							}
							if (kind > 75) {
								kind = 75;
							}
							jjCheckNAdd(44);
							break;
						case 1:
							if ((jjbitVec0[i2] & l2) != 0L && kind > 8) {
								kind = 8;
							}
							break;
						case 14:
							if ((jjbitVec0[i2] & l2) != 0L) {
								jjstateSet[jjnewStateCnt++] = 15;
							}
							break;
						case 29:
							if ((jjbitVec0[i2] & l2) != 0L) {
								jjAddStates(7, 10);
							}
							break;
						default:
							break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 64 - (jjnewStateCnt = startsAt))) {
				return curPos;
			}
			try {
				curChar = input_stream.readChar();
			}
			catch (java.io.IOException e) {
				return curPos;
			}
		}
	}


	/**
	 *  Description of the Method
	 */
	private final static void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 64; i-- > 0; ) {
			jjrounds[i] = 0x80000000;
		}
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Returned Value
	 */
	private final static Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}
}
