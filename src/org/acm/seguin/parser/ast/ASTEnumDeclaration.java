/*
 *  Author: Mike Atkinson
 *
 *  This software has been developed under the copyleft
 *  rules of the GNU General Public License.  Please
 *  consult the GNU General Public License for more
 *  details about use and distribution of this software.
 */
package org.acm.seguin.parser.ast;

import org.acm.seguin.parser.JavaParserVisitor;
import org.acm.seguin.parser.JavaParser;
import org.acm.seguin.pretty.JavaDocComponent;
import org.acm.seguin.pretty.JavaDocable;
import org.acm.seguin.pretty.JavaDocableImpl;
import org.acm.seguin.pretty.PrintData;
import org.acm.seguin.pretty.ForceJavadocComments;
import org.acm.seguin.pretty.ai.RequiredTags;


import org.acm.seguin.util.FileSettings;
import org.acm.seguin.pretty.DescriptionPadder;
/* Generated By:JJTree: Do not edit this line. ASTEnumDeclaration.java */

public class ASTEnumDeclaration extends AccessNode {
    // Instance Variables
    private JavaDocableImpl jdi;
    
    
  public ASTEnumDeclaration(int id) {
    super(id);
    jdi = new JavaDocableImpl();
  }

  public ASTEnumDeclaration(JavaParser p, int id) {
    super(p, id);
    jdi = new JavaDocableImpl();
  }


    
    /**
     *  Checks to see if it was printed
     *
     *@return    true if it still needs to be printed
     */
    public boolean isRequired() {
        return jdi.isRequired() && isRequired("field");
    }
    
  
    /**
     *  Allows you to add a java doc component
     *
     *@param  component  the component that can be added
     */
    public void addJavaDocComponent(JavaDocComponent component) {
        jdi.addJavaDocComponent(component);
    }
    
    
    /**
     *  Prints all the java doc components
     *
     *@param  printData  the print data
     */
    public void printJavaDocComponents(PrintData printData) {
        FileSettings bundle = FileSettings.getRefactoryPrettySettings(); // getSettings("Refactory", "pretty");
        jdi.printJavaDocComponents(printData, bundle.getString("enum.tags"));
    }
    
    
    /**
     *  Makes sure all the java doc components are present
     */
    public void finish() {
        FileSettings bundle = FileSettings.getRefactoryPrettySettings(); // getSettings("Refactory", "pretty");   //  Get the resource bundle
        jdi.require("", DescriptionPadder.find(bundle, "enum.descr"));           //  Description of the field
        ASTLiteral id = (ASTLiteral) jjtGetChild(1);                             //  Require the other tags
        RequiredTags.getTagger().addTags(bundle, "enum", id.getName(), jdi);
    }

  /** Accept the visitor. **/
  public Object jjtAccept(JavaParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
}
