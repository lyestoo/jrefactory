/*
 *  Author: Mike Atkinson
 *
 *  This software has been developed under the copyleft
 *  rules of the GNU General Public License.  Please
 *  consult the GNU General Public License for more
 *  details about use and distribution of this software.
 */
package org.acm.seguin.parser.ast;

import org.acm.seguin.parser.JavaParserVisitor;
import org.acm.seguin.parser.JavaParserTreeConstants;
import org.acm.seguin.parser.Node;
import org.acm.seguin.parser.NamedToken;
import org.acm.seguin.parser.JavaParser;
import org.acm.seguin.parser.Token;
import java.util.*;
/* Generated By:JJTree: Do not edit this line. ASTClassOrInterfaceType.java */

public class ASTClassOrInterfaceType extends ASTName {
  public ASTClassOrInterfaceType(int id) {
    super(id);
  }

  public ASTClassOrInterfaceType(JavaParser p, int id) {
    super(p, id);
  }

  public ASTClassOrInterfaceType(ASTName name) {
    super(JavaParserTreeConstants.JJTCLASSORINTERFACETYPE);
    children = name.children;
  }

  

  /** Accept the visitor. **/
  public Object jjtAccept(JavaParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }
  
  


	/**
	 *  Determines if two names start with the same series of items
	 *
	 *@param  otherName  Description of Parameter
	 *@return            Description of the Returned Value
	 */
	public boolean startsWith(ASTClassOrInterfaceType otherName)
	{
		//  To start with the other name, the other name must be less than or equal in parts
		if (otherName.getNameSize() > getNameSize()) {
			return false;
		}

		//  Look for the point where they are different
		int last = Math.min(otherName.getNameSize(), getNameSize());
		for (int ndx = 0; ndx < last; ndx++) {
			if (!getNamePart(ndx).equals(otherName.getNamePart(ndx))) {
				return false;
			}
		}

		//  They must be the same
		return true;
	}



	/**
	 *  Change starting part. Presumes that otherName is less than the length of
	 *  the current name.
	 *
	 *@param  oldBase  Description of Parameter
	 *@param  newBase  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	public ASTClassOrInterfaceType changeStartingPart(ASTClassOrInterfaceType oldBase, ASTClassOrInterfaceType newBase)
	{
		ASTClassOrInterfaceType result = new ASTClassOrInterfaceType(JavaParserTreeConstants.JJTCLASSORINTERFACETYPE);

		int last = newBase.getNameSize();
		for (int ndx = 0; ndx < last; ndx++) {
			result.addNamePart(newBase.getNamePart(ndx));
		}

		int end = getNameSize();
		int start = oldBase.getNameSize();
		for (int ndx = start; ndx < end; ndx++) {
			result.addNamePart(getNamePart(ndx));
		}

		return result;
	}
	/**
	 *  Change starting part. Presumes that otherName is less than the length of
	 *  the current name.
	 *
	 *@param  oldBase  Description of Parameter
	 *@param  newBase  Description of Parameter
	 *@return          Description of the Returned Value
	 */
	public ASTClassOrInterfaceType changeStartingPart(ASTClassOrInterfaceType oldBase, ASTName newBase)
	{
		ASTClassOrInterfaceType result = new ASTClassOrInterfaceType(JavaParserTreeConstants.JJTCLASSORINTERFACETYPE);

		int last = newBase.getNameSize();
		for (int ndx = 0; ndx < last; ndx++) {
			result.addNamePart(newBase.getNamePart(ndx));
		}

		int end = getNameSize();
		int start = oldBase.getNameSize();
		for (int ndx = start; ndx < end; ndx++) {
			result.addNamePart(getNamePart(ndx));
		}

		return result;
	}
}
